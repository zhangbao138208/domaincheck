<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<!-- 一. 添加log4net的自定义配置节点-->
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
	</configSections>
	<!--二. log4net的核心配置代码-->
	<log4net>
		<!--(一) 配置日志的输出途径-->
		<!--1. 输出途径(一) 将日志以回滚文件的形式写到文件中-->
		<appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
			<!--1.1 文件夹的位置（也可以写相对路径）-->
			<!--param name="File"  value="D:\MyLog1\" /-->
			<!--相对路径  C/S程序生成在Debug目录下-->
			<file value="Logs/Log_"/>
			<!--1.2 是否追加到文件-->
			<param name="AppendToFile" value="true" />
			<!--1.3 使用最小锁定模型（minimal locking model），以允许多个进程可以写入同一个文件 -->
			<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
			<!--1.4 配置Unicode编码-->
			<Encoding value="UTF-8" />
			<!--1.5 是否只写到一个文件里-->
			<param name="StaticLogFileName" value="false" />
			<!--1.6 配置按照何种方式产生多个日志文件 （Date：日期、Size：文件大小、Composite：日期和文件大小的混合方式）-->
			<param name="RollingStyle" value="Composite" />
			<!--1.7 介绍多种日志的的命名和存放在磁盘的形式-->
			<!--1.7.1 在根目录下直接以日期命名txt文件 注意"的位置,去空格 -->
			<param name="DatePattern" value="yyyy_MM_dd&quot;.log&quot;" />
			<!--1.7.2 在根目录下按日期产生文件夹，文件名固定 test.log  -->
			<!--<param name="DatePattern" value="yyyy-MM-dd/"test.log""  />-->
			<!--1.7.3 在根目录下按日期产生文件夹，这是按日期产生文件夹，并在文件名前也加上日期  -->
			<!--<param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-test.log""  />-->
			<!--1.7.4 在根目录下按日期产生文件夹，这再形成下一级固定的文件夹  -->
			<!--<param name="DatePattern" value="yyyyMMdd/"OrderInfor/test.log""  />-->
			<!--1.8 配置每个日志的大小。【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志，
      超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。-->
			<param name="maximumFileSize" value="10MB" />
			<!--1.9 最多产生的日志文件个数，超过则保留最新的n个 将value的值设置-1，则不限文件个数 【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】
        与1.8中maximumFileSize文件大小是配合使用的-->
			<param name="MaxSizeRollBackups" value="5" />
			<!--1.10 配置文件文件的布局格式，使用PatternLayout，自定义布局-->
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="记录时间：%date %n线程ID:[%thread] %n日志级别：%-5level %n出错类：%logger property: [%property{NDC}] - %n描述：%message%newline %n%newline"/>
			</layout>
		</appender>

		<!--2. 输出途径(二) 记录日志到数据库-->
		<appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
			<!--2.1 设置缓冲区大小，只有日志记录超设定值才会一块写入到数据库-->
			<param name="BufferSize" value="1" />
			<!--2.2 引用-->
			<connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
			<!--2.3 数据库连接字符串-->
			<connectionString value="data source=localhost;initial catalog=LogDB;integrated security=false;persist security info=True;User ID=sa;Password=123456" />
			<!--2.4 SQL语句插入到指定表-->
			<commandText value="INSERT INTO LogInfor ([threadId],[log_level],[log_name],[log_msg],[log_exception],[log_time]) VALUES (@threadId, @log_level, @log_name, @log_msg, @log_exception,@log_time)" />
			<!--2.5 数据库字段匹配-->
			<!-- 线程号-->
			<parameter>
				<parameterName value="@threadId" />
				<dbType value="String" />
				<size value="100" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%thread" />
				</layout>
			</parameter>
			<!--日志级别-->
			<parameter>
				<parameterName value="@log_level" />
				<dbType value="String" />
				<size value="100" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%level" />
				</layout>
			</parameter>
			<!--日志记录类名称-->
			<parameter>
				<parameterName value="@log_name" />
				<dbType value="String" />
				<size value="100" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%logger" />
				</layout>
			</parameter>
			<!--日志信息-->
			<parameter>
				<parameterName value="@log_msg" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%message" />
				</layout>
			</parameter>
			<!--异常信息  指的是如Infor 方法的第二个参数的值-->
			<parameter>
				<parameterName value="@log_exception" />
				<dbType value="String" />
				<size value="2000" />
				<layout type="log4net.Layout.ExceptionLayout" />
			</parameter>
			<!-- 日志记录时间-->
			<parameter>
				<parameterName value="@log_time" />
				<dbType value="DateTime" />
				<layout type="log4net.Layout.RawTimeStampLayout" />
			</parameter>
		</appender>
		<!--(二). 配置日志的的输出级别和加载日志的输出途径-->
		<root>
			<!--1. level中的value值表示该值及其以上的日志级别才会输出-->
			<!--OFF > FATAL(致命错误) > ERROR（一般错误） > WARN（警告） > INFO（一般信息） > DEBUG（调试信息）  > ALL  -->
			<!--OFF表示所有信息都不写入，ALL表示所有信息都写入-->
			<level value="DEBUG"></level>
			<!--2. append-ref标签表示要加载前面的日志输出途径代码  通过ref和appender标签的中name属性相关联-->
			<appender-ref ref="RollingFileAppender"></appender-ref>
			<appender-ref ref="AdoNetAppender"></appender-ref>
		</root>
	</log4net>

</configuration>